<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[MySQL的学习(5)]]></title>
    <url>%2FMySQL(5).html</url>
    <content type="text"><![CDATA[这节学习多表查询,子查询,事务,DCL(用户管理与权限管理) 多表查询 准备表 123456789101112131415161718192021-- 创建部门表CREATE TABLE dept( id INT PRIMARY KEY AUTO_INCREMENT, NAME VARCHAR(20));INSERT INTO dept (NAME) VALUES ('开发部'),('市场部'),('财务部');-- 创建员工表CREATE TABLE emp ( id INT PRIMARY KEY AUTO_INCREMENT, NAME VARCHAR(10), gender CHAR(1), -- 性别 salary DOUBLE, -- 工资 join_date DATE, -- 入职日期 dept_id INT, FOREIGN KEY (dept_id) REFERENCES dept(id) -- 外键，关联部门表(部门表的主键));INSERT INTO emp(NAME,gender,salary,join_date,dept_id) VALUES('孙悟空','男',7200,'2013-02-24',1);INSERT INTO emp(NAME,gender,salary,join_date,dept_id) VALUES('猪八戒','男',3600,'2010-12-02',2);INSERT INTO emp(NAME,gender,salary,join_date,dept_id) VALUES('唐僧','男',9000,'2008-08-08',2);INSERT INTO emp(NAME,gender,salary,join_date,dept_id) VALUES('白骨精','女',5000,'2015-10-07',3);INSERT INTO emp(NAME,gender,salary,join_date,dept_id) VALUES('蜘蛛精','女',4500,'2011-03-14',1); 笛卡儿积: 有两个集合A,B,取这两个集合的所有组成情况 要完成多表查询,需要消除无用的数据 内连接查询 隐式内连接 123456789101112-- 查询员工的姓名 工资 和部门select t1.`NAME`,t1.`salary`,t2.`NAME` from emp t1,dept t2 where t1.`dept_id` = t2.`id`;-- 下面是正规写法select t1.`NAME`, t1.`salary`, t2.`NAME`from emp t1, dept t2where t1.`dept_id` = t2.`id`; 显式内连接 语法: 1select 字段列表 from 表名1 inner join 表名2 on 条件; 例如: 1SELECT * FROM emp INNER JOIN dept ON emp.`dept_id` = dept.`id`; 内连接注意事项 从哪些表中查询数据 条件是什么 查询哪些字段 外连接查询 左外连接 语法: 1select 字段列表 from 表1 left [outer] join 表2 on 条件; 查询的是左表所有数据及其交集部分 右外连接 语法: 1select 字段列表 from 表1 right [outer] join 表2 on 条件; 查询的是左表所有数据及其交集部分 子查询事务事务的基本介绍 什么是事务:如果一个包含多个步骤的业务操作,被事务管理,那么这些操作要么同时成功,要么同时失败 操作: 开启事务:start transaction; 回滚:rollback; 提交事务:commit;123456789101112131415161718192021222324252627 CREATE TABLE account(id INT PRIMARY KEY AUTO_INCREMENT,NAME VARCHAR(10),balance DOUBLE ); INSERT INTO account VALUES (NULL , 'zhangsan',1000); INSERT INTO account VALUES (NULL,'lisi',1000); SELECT * FROM account; -- zhangsan给lisi转账500元 -- 0. 开启事务 START TRANSACTION; -- 1. zhangsan账户 -500 UPDATE account SET balance = balance -500 WHERE NAME='zhangsan'; -- 错误 -- 2. lisi账户 +500 UPDATE account SET balance = balance + 500 WHERE NAME = 'lisi'; -- 执行没有错误,提交事务 COMMIT; -- 出问题了,回滚事务 ROLLBACK; MySQL数据库中事务默认自动提交 事务提交的两种方式: 自动提交: mysql就是自动提交的 一条DML(增删改)语句会自动提交一次事务 手动提交: oracle数据库默认手动提交 需要先开启事务,在提交 修改事务的默认提交方式 查询事务的默认提交方式:select @@qutocommit; -- 1 表示自动提交 --0 表示手动提交 修改默认提交方式:set @@autocommit = 0 事务的四大特征 原子性:是不可分割的最小操作单位,要么同时成功,要么同时失败 持久性:当事务提交或回滚后,数据库会持久化的保存数据 隔离性:多个事务之间,相互独立 一致性:事务操作前后,数据总量不变 事务的隔离级别(了解) 多个事务之间是隔离的,相互独立的。但是如果多个事务操作同一批数据,则会引发一些问题,设置不同的隔离级别就可以解决这些问题 存在问题 脏读:一个事务,读取到另一个事务中没有提交的数据 不可重复读:同一个事务中,两次读取到的数据不一样 幻读:一个事务操作数据表中所有记录,另一个事务添加了一条数据,则第一个事务查询不到自己的修改 隔离级别: read uncommitted:读未提交 产生的问题:脏读,不可重复读,幻读 read committed:读已提交(oracle默认) 产生的问题:不可重复读,幻读 repeatable read:可重复读(mysql默认) 产生的问题:幻读 serializable:串行化 可以解决所有的问题 隔离级别从小到大安全性越来越高,但是效率越来越低 数据库查询隔离级别:select @@tx_islation; 数据库设置隔离级别:set global transaction isolation level 级别字符串; DCL管理用户 查询用户 1234-- 1. 切换到mysql数据库USE mysql;-- 2. 查询user表SELECT * FROM USER; `%`表示可以在任意主机使用用户登陆数据库 添加用户 1create user '用户名'@'主机名' identified by '密码'; 删除用户 1drop user '用户名'@'主机名' 修改用户密码 1set password for '用户名'@'主机名' = password('新密码'); mysql中忘记了root用户的密码怎么办 管理员运行cmd –&gt; net stop mysql 停止mysql服务 使用无验证方式启动mysql服务:mysqld --skip-grant-tables 打开新的cmd窗口,直接输入mysql命令,敲回车。就可以登陆成功 user mysql; set password for &#39;root&#39;@&#39;localhost&#39; = password(&#39;新密码&#39;); 关闭两个窗口 打开任务管理器,手动结束mysqld.exe的进程 启动mysql服务 使用新密码登陆 权限管理 查询权限 1SHOW GRANTS FOR '用户名'@'主机名'; 授予权限 123grant 权限列表 on 数据库名.表名 to '用户名'@'主机名';-- 给用户授予所有权限,在任意数据库任意表上grant all on *.* to '用户名'@'主机名'; 撤销权限 1revoke 权限列表 on 数据库名.表名 from '用户名'@'主机名'; MySQL的学习就到这里]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL的学习(4)]]></title>
    <url>%2FMySQL(4).html</url>
    <content type="text"><![CDATA[这节学习MySQL的表的约束,多表操作和三大范式 约束 概念:对表中的数据进行限定,保证数据的正确性,有效性和完整性 主键约束:primary key 含义:非空且唯一 一张表只能有一个字段为主键 主键就是表中记录的唯一标识 在创建表时添加主键约束 1234create table stu( id int primary key, name varchar(20)); 创建完表后添加主键 1ALTER TABLE stu MODIFY id INT PRIMARY KEY; 删除主键约束 1alter table stu drop primary key; 自动增长 如果某一列是数值类型的,使用 auto_increment 来完成值的自动增长 在创建表时,添加主键约束,并且完成主键自动增长 1234create table stu( id int primary key auto_increment, name varchar(20)); 添加自动增长 1alter table stu modify id int auto_increment; 删除自动增长 1alter table stu modify id int; 非空约束:not null,值不能为 null 创建表时添加约束 1234create table stu( id int, name varchar(20) not null); 创建表完后添加非空约束 1ALTER TABLE stu MODIFY NAME VARCHAR(20) NOT NULL; 删除非空约束 1ALTER TABLE stu MODIFY NAME VARCHAR(20); 唯一约束:unique,值不能重复 创建表时添加唯一约束 1234CREATE TABLE stu( id INT, phone_number VARCHAR(20) UNIQUE -- 添加了唯一约束); 创建表后添加唯一约束 1alter table stu modify phone_number varchar(20) unique; 删除唯一约束 1ALTER TABLE stu DROP INDEX phone_number; MySQL中,唯一约束限定列的值可以有多个null 外键约束:foreign key 在创建表时添加外键 12345create table 表名( ... 外键列 constraint 外键名称 foreign key 外键列名称 references 主表名称(主表列名称)); 例如: 先创建部门的表 123456CREATE TABLE department( id INT PRIMARY KEY AUTO_INCREMENT, dep_name VARCHAR(20), dep_location VARCHAR(20) );INSERT INTO department VALUES(NULL, '研发部','广州'),(NULL, '销售部', '深圳'); 在创建员工表,并添加外键 1234567891011121314CREATE TABLE employee( id INT PRIMARY KEY AUTO_INCREMENT, NAME VARCHAR(20), age INT, dep_id INT, CONSTRAINT emp_dept_fk FOREIGN KEY (dep_id) REFERENCES department(id));INSERT INTO employee (NAME, age, dep_id) VALUES ('张三', 20, 1); INSERT INTO employee (NAME, age, dep_id) VALUES ('李四', 21, 1); INSERT INTO employee (NAME, age, dep_id) VALUES ('王五', 20, 1); INSERT INTO employee (NAME, age, dep_id) VALUES ('老王', 20, 2); INSERT INTO employee (NAME, age, dep_id) VALUES ('大王', 22, 2); INSERT INTO employee (NAME, age, dep_id) VALUES ('小王', 18, 2); 删除外键 1alter table employee drop foreign key emp_dept_fk; 添加外键 1alter table employee add constraint emp_dept_fk foreign key (dep_id) references department(id); 级联操作 添加级联操作alter table employee add constraint emp_dept_fk foreign key (dep_id) references department(id) on update cascade; 级联更新: on update cascade 级联删除: on delete cascade 数据库的设计多表之间的关系 一对一(了解) 如: 人和身份证 一对多(多对一) 如: 部门和员工,一个员工只能对应一个部门 多对多 学生和课程,一个学生可以选择很多门课程,一个课程也可以被很多学生选择 数据库设计的范式 概念: 设计关系数据库时，遵从不同的规范要求，设计出合理的关系型数据库，这些不同的规范要求被称为不同的范式，各种范式呈递次规范，越高的范式数据库冗余越小。要遵循后边的范式要求,必须先遵循前边的所有范式要求目前关系数据库有六种范式：第一范式（1NF）、第二范式（2NF）、第三范式（3NF）、巴斯-科德范式（BCNF）、第四范式(4NF）和第五范式（5NF，又称完美范式） 分类： 第一范式（1NF）：每一列都是不可分割的原子数据项 第二范式（2NF）：在1NF的基础上，非码属性必须完全依赖于码（在1NF基础上消除非主属性对主码的部分函数依赖） 几个概念： 函数依赖：A–&gt;B,如果通过A属性(属性组)的值，可以确定唯一B属性的值。则称B依赖于A 例如：学号–&gt;姓名。 （学号，课程名称） –&gt; 分数 完全函数依赖：A–&gt;B， 如果A是一个属性组，则B属性值得确定需要依赖于A属性组中所有的属性值。 例如：（学号，课程名称） –&gt; 分数 部分函数依赖：A–&gt;B， 如果A是一个属性组，则B属性值得确定只需要依赖于A属性组中某一些值即可。 例如：（学号，课程名称） – &gt; 姓名 传递函数依赖：A–&gt;B, B – &gt;C . 如果通过A属性(属性组)的值，可以确定唯一B属性的值，在通过B属性（属性组）的值可以确定唯一C属性的值，则称 C 传递函数依赖于A 例如：学号–&gt;系名，系名–&gt;系主任 码：如果在一张表中，一个属性或属性组，被其他所有属性所完全依赖，则称这个属性(属性组)为该表的码 例如：该表中码为：（学号，课程名称） 主属性：码属性组中的所有属性 非主属性：除过码属性组的属性 第三范式（3NF）：在2NF基础上，任何非主属性不依赖于其它非主属性（在2NF基础上消除传递依赖） 数据库的备份与还原 命令行方式: 备份mysqldump -u用户名 -p密码 数据库名称&gt; 保存的路径 还原: 登录数据库 创建数据库 使用数据库 执行命令。source 文件路径 下节学习多表查询,子查询,事务,用户管理与权限管理]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ajax(1)]]></title>
    <url>%2Fajax(1).html</url>
    <content type="text"><![CDATA[这节学习ajax]]></content>
      <categories>
        <category>ajax</category>
      </categories>
      <tags>
        <tag>ajax</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux的学习(3)]]></title>
    <url>%2Flinux(3).html</url>
    <content type="text"><![CDATA[今天学习编辑器之神Vim vi和vim都是Linux中的编辑器,不同的是,vim比较高级,可以视为vi的升级版本。vi使用于文本编辑,但是vim更适合写代码。Vim重点是光标的移动,模式切换,删除,查找,替换,复制,粘贴,撤销命令的使用 三种模式Vim存在三种模式(大众的认知):命令模式,编辑模式(输入模式),末行模式(尾行模式) 命令模式:在该模式下是不能对文件直接编辑,可以输入快捷键进行一些操作(删除,复制行,移动光标,粘贴等等) 编辑模式:在该模式下可以对文件内容进行编辑 末行模式:可以在末行输入命令对文件进行操作(替换,搜索,保存,退出,撤销,高亮等等) Vim的打开文件的方式 vim 文件路径: 打开指定的文件(文件可以不存在) vim +数字 文件路径: 打开指定的文件,并且将光标移动到指定行 vim +/关键词 文件路径: 打开指定的文件,并且高亮显示关键词(搜索) 命令模式(打开文件之后就是命令模式)1. 光标移动 光标移动到行首: shift+6(不是小键盘的6) 光标移动到行尾: shift+4 光标移动到首行行首: gg 光标移动到末行行首: G 翻屏 向上翻屏: ctrl+b或PgUp 向下翻屏: ctrl+f或PgDn 快速定位到指定行: 数字G 2. 复制操作 复制光标所在行: yy 粘贴: 在想要粘贴的地方按下 p 键[将粘贴在光标所在行的下一行],如果想要粘贴在光标所在行之前,则使用 p 键 3. 剪切或删除操作 剪切/删除光标所在行 按键: dd (删除之后下一行上移) 严格意义上来说dd是剪切命令,但如果剪切了不粘贴就是删除的效果 剪切/删除光标所在行为准(包含当前行),向下删除/剪切指定的行 按键: 数字dd (删除之后下一行上移) 剪切/删除光标所在的当前行(光标所在位置)之后的内容,但是删除之后下一行不上移 按键: D (删除之后当前行变成空白行) 4. 撤销/恢复 撤销: 输入:u(末行模式)或者 u 恢复: crtl+r 恢复(取消)之前的撤销操作 三种模式的切换 末行模式 进入方式: 由命令模式进入,按下: 或者 /(表示查找) 退出方式: 按下 esc 连按两次 esc 键 删除末行全部输入字符 保存操作 输入: :w 保存文件 输入: :w 路径 另存为 退出操作 输入: :q 退出文件默认情况下,退出的时候需要对已经进行修改的文件进行保存,然后才能退出 保存并退出 输入: :wq 保存并退出 强制(!) 输入: :q! 强制退出,修改的内容不保存,直接退出 搜索/查找 输入: :/关键词 再按下回车,关键词高亮 在搜索结果中切换上/下一个结果: N/n 显示行号(临时) 输入::set nu[number] 如果想取消显示，则输入::set nonu 补充：要想永久显示行号，需要进行对vim的配置。 建议创建文件：~/.vimrc（该配置是针对用户的，每个用户自己家下有一个独立.vimrc）12[root@localhost ]# cat ~/.vimrcset nu 编辑模式 i : 在光标所在字符前开始插入 a : 在光标所在字符前开始插入 异常退出什么是异常退出：在编辑文件之后并没有正常的去wq（保存退出），而是遇到突然关闭终端或者断电的情况，则会显示下面的效果，这个情况称之为异常退出：解决办法：删除“.文件名.swp”文件即可解决上述问题。 Vim的学习就到这里]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux的学习(1)]]></title>
    <url>%2Flinux(1).html</url>
    <content type="text"><![CDATA[今天开始学习Linux，废话不多说，直接上内容 1.目录结构 /：表示的是根的意思 /bin: (binary)存放的是一些二进制文件，在Linux中二进制文件是可以被执行的。这个目录中的命令是给普通用户使用(非超级管理员用户) /etc: Linux下所有的配置文件都会存放在etc目录 /home: 是所有非root用户家目录的一个集合 /root: root用户的家目录 /sbin: sbin表示shell bin ，里面同样也类似与bin目录，也存放了一些二进制文件，只不过这些命令只能是让超级管理员去运行 /usr: 存放着一些用户自己安装的软件，类似于windows下的Program Files目录 /var: variable(变量)，存放着会变的文件，例如Linux下的日志文件。 这些都是比较重要的目录。 2.命令行(shell) 3.基本指令通用语法格式 : 指令名称 [选项][操作的目标] 简单指令ls指令 ls [路径]: 表示列出指定路径下的文件夹和文件的名字，如果路径没有指定则列出当前路径下的。 12james@LAPTOP-4UFJ74L2:~$ lsDesktop Documents Downloads Music Pictures Public Templates Videos ls -l[路径]:表示以列表的形式列出指定路径下的文件夹和文件的名字 12345678910james@LAPTOP-4UFJ74L2:~$ ls -ltotal 0drwxr-xr-x 1 james james 4096 Jul 28 13:39 Desktopdrwxr-xr-x 1 james james 4096 Jul 28 13:39 Documentsdrwxr-xr-x 1 james james 4096 Jul 28 13:39 Downloadsdrwxr-xr-x 1 james james 4096 Jul 28 13:39 Musicdrwxr-xr-x 1 james james 4096 Jul 28 13:39 Picturesdrwxr-xr-x 1 james james 4096 Jul 28 13:39 Publicdrwxr-xr-x 1 james james 4096 Jul 28 13:39 Templatesdrwxr-xr-x 1 james james 4096 Jul 28 13:39 Videos ls -la[路径]: 表示以列表的形式列出指定路径下的文件夹和文件名(包含隐藏文件，all),以.开头的为隐藏文件 123456789101112131415161718192021222324252627282930james@LAPTOP-4UFJ74L2:~$ ls -latotal 164drwxr-xr-x 1 james james 4096 Aug 1 17:59 .drwxr-xr-x 1 root root 4096 May 20 14:14 ..-rw------- 1 james james 1754 Aug 1 17:59 .ICEauthority-rw------- 1 james james 545 Aug 1 17:59 .Xauthority-rw------- 1 james james 943 Aug 1 15:15 .bash_history-rw-r--r-- 1 james james 220 May 20 14:14 .bash_logout-rw-r--r-- 1 james james 3771 May 20 14:14 .bashrcdrwxrwxrwx 1 james james 4096 Jul 28 13:54 .cachedrwxrwxrwx 1 james james 4096 Jul 28 13:57 .configdrwx------ 1 james james 4096 Jul 28 13:39 .dbusdrwx------ 1 james james 4096 Aug 1 17:59 .gnupgdrwx------ 1 james james 4096 Jul 28 13:39 .gvfsdrwxrwxrwx 1 james james 4096 Jul 28 13:39 .local-rw-r--r-- 1 james james 807 May 20 14:14 .profile-rw------- 1 james james 7 Jul 28 14:17 .python_history-rw-r--r-- 1 james james 0 May 20 14:17 .sudo_as_admin_successful-rw------- 1 james james 10589 Aug 1 15:15 .viminfodrwx------ 1 james james 4096 Aug 1 17:59 .vnc-rw------- 1 james james 81127 Aug 1 18:00 .xsession-errors-rw-rw-rw- 1 james james 42275 May 20 14:26 .zcompdumpdrwxr-xr-x 1 james james 4096 Jul 28 13:39 Desktopdrwxr-xr-x 1 james james 4096 Jul 28 13:39 Documentsdrwxr-xr-x 1 james james 4096 Jul 28 13:39 Downloadsdrwxr-xr-x 1 james james 4096 Jul 28 13:39 Musicdrwxr-xr-x 1 james james 4096 Jul 28 13:39 Picturesdrwxr-xr-x 1 james james 4096 Jul 28 13:39 Publicdrwxr-xr-x 1 james james 4096 Jul 28 13:39 Templatesdrwxr-xr-x 1 james james 4096 Jul 28 13:39 Videos clear指令 表示的含义: 清空当前屏幕中全部的命令(其实实质是没有清空，只不过是顶到上面去了) su指令 作用: 切换用户 语法: su 需要切换到的用户名(用户名可以不写，则表示切换到root用户) 当切换到的用户权限如果比当前用户的权限低，可以直接切换，不需要密码，可直接切换；反之，如果从低到高切换则要求输入被切换到的账号对应的密码 cd指令 作用: 切换目录(change directory) 语法: cd 需要切换到的路径(路径可以是相对路径，也可以是绝对路径) 路径可以写可以不写，不写则表示切换到当前用户的家目录 在切换路径或者后期打开一个文件的时候可以多使用tab键(自动补全命令) 低级用户没有权限访问高级用户相关的资源 pwd指令 作用: 打印当前的工作路径 12james@LAPTOP-4UFJ74L2:~$ pwd/home/james 文档的操作指令创建文件 命令:touch 语法: touch 路径 例如: 在当前路径下创建一个文件名字叫a.txt1touch a.txt 创建文件夹 命令: mkdir 语法: mkdir 文件夹路径 文件夹与文件不能同名 复制 命令: cp 语法: cp [-r]需要复制的文档 需要保存的位置 例如: cp /a.txt /home/james 选项说明: -r: 表示递归，如果复制的是文件夹，-r必须加 移动/重命名 命令: mv 语法: mv 需要操作的文档 新的文档的位置 例如: 移动 1234567891011james@LAPTOP-4UFJ74L2:~$ ls12 Desktop Documents Downloads Music Pictures Public Templates Videosjames@LAPTOP-4UFJ74L2:~$ touch a.txtjames@LAPTOP-4UFJ74L2:~$ ls12 Desktop Documents Downloads Music Pictures Public Templates Videos a.txtjames@LAPTOP-4UFJ74L2:~$ mv /home/james/a.txt /home/james/12james@LAPTOP-4UFJ74L2:~$ ls12 Desktop Documents Downloads Music Pictures Public Templates Videosjames@LAPTOP-4UFJ74L2:~$ cd 12james@LAPTOP-4UFJ74L2:~/12$ lsa.txt 重命名 12345james@LAPTOP-4UFJ74L2:~$ ls12 Desktop Documents Downloads Music Pictures Public Templates Videosjames@LAPTOP-4UFJ74L2:~$ mv 12 123james@LAPTOP-4UFJ74L2:~$ ls123 Desktop Documents Downloads Music Pictures Public Templates Videos 删除 命令: rm 语法: rm [-rf] 需要删除的文档 选项说明: -r: 表示递归(删除文件夹) -f: 表示强制, 没有删除确认提示 rm -rf /: 删除系统全部文件 文档的查看指令tail指令 作用: 查看一个文件的末n行 语法: tail-n 文件的路径 说明: -n可以不写，不写，默认表示10行 head指令 作用: 查看一个文件的头n行 语法: head-n 文件的路径 说明: -n可以不写，不写，默认表示10行 cat指令 作用: 查看某个文件的全部内容 语法: cat 文件的路径1 文件路径2 文件路径3... tac指令 作用: 倒序查看某个文件的全部内容 语法: tac 文件的路径1 文件路径2 文件路径3... vim指令 作用: 打开文件，显示内容 语法: vim 文件的路径 关机重启指令reboot指令 作用: 重启计算机 语法: reboot 部分情况下(除非自开机以来，只有当前一个普通用户登陆过)，普通用户无法执行reboot命令 shutdown指令 作用: 关机 语法: shutdown -h 时间 时间常见的值: now: 表示立即关机 +m : m表示数字，例如+5，则表示五分钟之后关机 halt指令 作用: 关机(关闭内存) 语法: halt 下节继续学习指令]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux的学习(2)]]></title>
    <url>%2Flinux(2).html</url>
    <content type="text"><![CDATA[今天继续学习linux进阶命令 进阶指令1.du指令 作用: du表示directory used 语法: du -sh 目录路径 选项说明: s: 表示sumary，汇总统计 h: 表示以较高可读性的形式显示 例如: 12james@LAPTOP-4UFJ74L2:~$ du -sh /etc4.0M /etc 2.df指令 作用: disk free,查看磁盘的剩余空间的情况 语法: df -m或者df -h 选项: m:以较高可读性显示(以MB为单位) h:以较高可读性显示(以GB为单位) 例如: 123456789101112james@LAPTOP-4UFJ74L2:~$ df -mFilesystem 1M-blocks Used Available Use% Mounted onrootfs 120826 62740 58087 52% /none 120826 62740 58087 52% /devnone 120826 62740 58087 52% /runnone 120826 62740 58087 52% /run/locknone 120826 62740 58087 52% /run/shmnone 120826 62740 58087 52% /run/userC: 120826 62740 58087 52% /mnt/cD: 678918 293381 385538 44% /mnt/dE: 614405 399054 215352 65% /mnt/eF: 512000 29233 482768 6% /mnt/f 1234567891011Filesystem Size Used Avail Use% Mounted onrootfs 118G 62G 57G 52% /none 118G 62G 57G 52% /devnone 118G 62G 57G 52% /runnone 118G 62G 57G 52% /run/locknone 118G 62G 57G 52% /run/shmnone 118G 62G 57G 52% /run/userC: 118G 62G 57G 52% /mnt/cD: 664G 287G 377G 44% /mnt/dE: 601G 390G 211G 65% /mnt/eF: 500G 29G 472G 6% /mnt/f 3.free指令 作用: 查看内存的使用情况 语法: free -m 选项说明: m:以MB为单位进行查看 例如: 1234james@LAPTOP-4UFJ74L2:~$ free -m total used free shared buff/cache availableMem: 8101 4499 3377 17 223 3471Swap: 15103 9 15093 第一行表示memory,是内存各项的数字 shared:共享内存 buffer:缓冲内存 cached:缓存内存 4.find指令 作用: 表示根据条件去查询文档的所在位置 语法: find 范围 选项 选项的值 常见的选项: -name:根据名字进行查询(重要) -type:根据文件的类型进行查询(重要) d:表示文件夹 f:表示普通文件 s:表示套接字文件 l:表示连接文件 c:表示字符设备文件 b:表示块状设备文件 -user:根据所用者进行查询(了解) -group:根据所属的用户组进行查询(了解) -size:根据大小进行查询(了解) 例如: 12345678james@LAPTOP-4UFJ74L2:~$ ls123 Desktop Documents Downloads Music Pictures Public Templates Videosjames@LAPTOP-4UFJ74L2:~$ find /home/ -name 123/home/james/123james@LAPTOP-4UFJ74L2:~$ find /home/ -name 123 -type d/home/james/123 补充: -name选项支持通配符(“*”),模糊查询 5.ps指令 作用: 表示process show,查看进程 语法: ps -ef 选项含义: -e: 等价于-A,all,表示全部 -f: 表示full,显示全部的列(默认显示一部分，不是显示全部) 例如: 123456james@LAPTOP-4UFJ74L2:~$ ps -efUID PID PPID C STIME TTY TIME CMDroot 1 0 0 09:07 ? 00:00:00 /init roroot 3 1 0 09:07 tty1 00:00:00 /init rojames 4 3 0 09:07 tty1 00:00:00 -bashjames 28 4 0 10:17 tty1 00:00:00 ps -ef UID:该进程的启动用户名(了解) PID:process id,进程的ID号(重要) PPID:parent process id,父级进程ID(重要) C:表示CPU的使用情况(了解) STIME:start time,启动时间(了解) TTY:终端的设备编号,?表示该进程不是有终端发起的(了解) TIME:持续运行的时间(了解) CMD:command,显示进程的命令名称或者位置(了解) 6.service指令 作用:用来操作服务的(启动/停止/重启) 语法:service 服务名 start/stop/restart 注意:对于服务名是由要求的,要求服务名必须存在于/etc/init.d目录下 除了可以用service指令操作服务,还可以通过如下语法:/etc/init.d/服务名 start/stop/restart 7.grep指令(重点) 作用:搜索,过滤,主要用于对文件/内容进行筛选,选出需要的内容 语法:grep[选项] 关键词(你要选择的内容) 文件路径/内容 常见的选项: -v:排除 扩展用法:grep -E &quot;关键词1|关键词2。。。&quot; 文件路径或内容 等价于 egrep &quot;关键词1|关键词2。。。&quot; 文件路径或内容 -E:表示extension,该语法表示多条件筛选,|表示or12345678910111213james@LAPTOP-4UFJ74L2:~$ cat b.txtdasdadsadasda123321james@LAPTOP-4UFJ74L2:~$ grep -E &quot;123|321&quot; b.txt123321james@LAPTOP-4UFJ74L2:~$ egrep &quot;123|321&quot; b.txt123321 8.wc指令 作用:word count,其作用为统计文件的各项数值(行,字节数,单词数) 语法:wc -lwc 文档的路径 选项含义: -l:line,行数 -w:word,单词数 -c:byte,词节数 例如: 12james@LAPTOP-4UFJ74L2:~$ wc -lwc b.txt 4 4 23 b.txt 注意lwc选项的顺序不影响其指令输出的结果的顺序,结果顺序一定是行，单词，字节的顺序 9.管道(重点) 严格意义上说其不是指令,只是一个符号|,该指令主要起到辅助的作用，能够将多个指令合在一行上进行操作,主要用在搜索过滤上面 语法:必须在终端中有输出内容的指令 | 该指令必须要求有输入的指令(要求有读取文件内容的需求) 管道的核心理解概念: 管道前面的指令的输出其实就是管道后面指令的输入 指令先学到这里,下节学习远古神器Vim]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL的学习(3)]]></title>
    <url>%2FMySQL(3).html</url>
    <content type="text"><![CDATA[这节学习更多的SQL语句 DML (增删改表中数据)1.添加数据 语法: 1insert into 表名 (列名1,列名2,列名3...) values (值1,值2,值3...); 注意事项 列名要和值一一对应 如果表名后,不定义列名,则默认给所有列添加值 1insert into 表名 values (值1,值2,值3...); 除了数据类型,其他类型需要使用引号引起来 2.删除数据 语法: 1delete from 表名 [where 条件]; 注意事项: 如果不加条件,则删除表中所有记录 如果要删除所有记录 delete from 表名; 不推荐使用。有多少条记录就会执行多少次删除操作 truncate table 表名; 推荐使用,先删除表,然后在创建一张一样的表,效率更高 3.修改数据 语法: 1update 表名 set 列名1 = 值1 , 列名2 = 值2, ... [where 条件]; 注意事项: 如果不加条件,则修改表中所有记录 DQL (查询表中的记录)1.基础查询 多个字段的查询 1select 字段1,字段2,... from 表名; 注意:如果查询所有字段,可以用*来替换字段列表 去除重复 distinct 1select distinct address from caseuser; 计算列 一般可以使用四则运算计算一些列的值(一般只会尽心数值型的计算) ifnull(表达式1,表达式2): null 参与的运算,计算结果都为 null 表达式1:哪个字段需要判断是否为 null 表达式2:如果该字段为 null 后的替换值 起别名: as 可省略 2.条件查询 语法:where 条件;子句 运算符: &gt; , &lt; , &lt;= , &gt;= ,= ,&lt;&gt; 123 -- 查询年龄不等于20岁SELECT * FROM student WHERE age != 20;SELECT * FROM student WHERE age &lt;&gt; 20; between...and 12345 -- 查询年龄大于等于20 小于等于30 SELECT * FROM student WHERE age &gt;= 20 &amp;&amp; age &lt;=30;SELECT * FROM student WHERE age &gt;= 20 AND age &lt;=30;SELECT * FROM student WHERE age BETWEEN 20 AND 30; in (集合) 123 -- 查询年龄22岁，18岁，25岁的信息SELECT * FROM student WHERE age = 22 OR age = 18 OR age = 25SELECT * FROM student WHERE age IN (22,18,25); like: 模糊查询 占位符: _:单个任意字符 %:多个任意字符123456 -- 查询姓马的有哪些？ likeSELECT * FROM student WHERE NAME LIKE '马%';-- 查询姓名第二个字是化的人 SELECT * FROM student WHERE NAME LIKE "_化%"; -- 查询姓名是3个字的人SELECT * FROM student WHERE NAME LIKE '___'; is null and 或 &amp;&amp; or 或 || not 或 ! null值不能用= (!=) 判断 要用 is is not判断是否为 null 3.排序查询 语法: order by子句 1order by 排序字段1 排序方式1 , 排序字段2 排序方式2...; 排序方式 ASC: 升序,默认 DESC: 降序 如果有多个排序条件,则当前边的条件值一样时,才会判断第二条件 4.聚合查询 将一列数据作为一个整体,进行纵向的计算 语法: 1select 聚合函数(字段) from 表名; count: 计算个数 一般选择非空的列: 主键 count(*); max: 计算最大值 min: 计算最小值 sum: 计算和 avg: 计算平均数 注意: 聚合函数的计算会自动排除null值 解决方案: 选择不包含非空的列进行计算 ifnull函数 5.分组查询 语法: 1group by 分组字段; 注意: 分组之后查询的字段: 分组字段,聚合函数 where和having的区别 where在分组之前进行限定,如果不满足条件,则不参与分组。having在分组之后进行限定,如果不满足条件,则不会被查询出来 where后不能跟聚合函数,having可以进行聚合函数的判断 例如: select gender,count(id) from caseuser where age &gt; 20 group by gender having count(id) &gt; 2; 6.分页查询 语法: limit 开始的索引,每页显示的条数 公式: 开始的索引 = (当前的页码 - 1) * 每页显示的条数 例如：SELECT * FROM caseuser LIMIT 0,3; --第一页SELECT * FROM caseuser LIMIT 3,3; --第二页SELECT * FROM caseuser LIMIT 6,3; --第三页 此操作为MySQL的方言 DQL(查询语句)学完了,下节学习约束,多表操作,三大范式和数据库的还原与备份]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL的学习(1)]]></title>
    <url>%2FMySQL(1).html</url>
    <content type="text"><![CDATA[MySQl是使用量第二的数据库，他开源，免费，深受中小型企业的喜欢，今天学习MySQL的安装与基本配置 MySQL数据库安装网下下载安装包安装即可，勾选我同意后next,选择custom(用户自定义)。然后选择安装目录(尽量不要选择C盘，目录路径不要出现中文字符)，直接点击下一步，最后点击Finish后会进入配置界面，依次选择Detailed Configuration–&gt;Developer Machine–&gt;Multifunctional Database–&gt;然后可以点击下一步(默认端口3306不要改动)–&gt;Manual Selected Defult Character Set(选择字符集：utf8)–&gt;将Include Bin Directory in windows PATH打对号–&gt;设置密码，用户名都是root，不需要设置–&gt;点击完成 命令行输入 mysql -uroot -p 出现 welcome to the mysql monitor 即安装完成 ，如果没有出现，安装失败，需要将mysql重新卸载安装 卸载 找到MySQl的安装目录，找到my.ini文件,复制 #Path to the database rootdatadir=”C:/ProgramData/MySQL/MySQL Server 5.5/Data/“ 卸载MySQL，控制面板卸载即可，此时没有卸载干净，打开刚才复制的文件夹，删除C:/ProgramData 目录下的MySQl文件夹，这是才算卸载，就可以进行MySQL的重新安装了 配置 启动MySQL服务以管理员身份打开命令行，输入 net start mysql:启动mysql服务 net stop mysql: 关闭mysql服务 mysql登陆mysql -uroot -p mysql登出exit MySQL存储数据的结构mysql的数据目录在 C://ProgramData//MySQL//MySQL Server//Data MySQL的安装配置就到这里，下节学习SQL语句]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL的学习(2)]]></title>
    <url>%2FMySQL(2).html</url>
    <content type="text"><![CDATA[今天来学习一下SQL语句以及数据库，表的CRUD操作 什么是SQL语句Structured Query Language : 结构化查询语言，定义了操作所有关系型数据库的规则。 SQL通用写法 SQL语句可以单行或多行书写，以分号结尾。 可使用空格和缩进来增强语句的可读性。 SQL语句不区分大小写。但推荐使用大写 3种注释 单行注释： --注释内容 # 注释内容 多行注释： /* 注释 */ SQL的分类 DDL: 用来定义数据库对象：数据库，表，列等。关键字：create,drop,alter等。 DML: 用来对数据库中的数据进行增删改。关键字：insert,delete,update等。 DQL: 用来查询数据库中表的记录。关键字：select,where等。 DCL: 数据控制语言(了解)，用来定义数据库的访问权限和安全级别，及创建用户。关键字：GRANT，REMOKE 等。 1.DDL：操作数据库，表操作数据库：CRUD1. C(create):创建 创建数据库:create database 数据库名称; 12mysql&gt; create database db1;Query OK, 1 row affected (0.00 sec) 如果db1数据库之前就存在，那么这条语句就会执行失败。我们可以再次执行一下上个命令。 12mysql&gt; create database db1;ERROR 1007 (HY000): Can't create database 'db1'; database exists 报错了，我们可以在创数据库的时候加一条判断语句:create database if not exists db1; 12mysql&gt; create database if not exists db1;Query OK, 1 row affected, 1 warning (0.00 sec) 并没有报错 我们也可以在创建数据库的时候指定数据库的字符集，默认是utf8,我们想要创建字符集为gbk的数据库。 12mysql&gt; create database db2 character set gbk;Query OK, 1 row affected (0.00 sec) 我们可以查看一下db2的创建信息:show create database db2; 1234567mysql&gt; show create database db2;+----------+-------------------------------------------------------------+| Database | Create Database |+----------+-------------------------------------------------------------+| db2 | CREATE DATABASE `db2` /*!40100 DEFAULT CHARACTER SET gbk */ |+----------+-------------------------------------------------------------+1 row in set (0.00 sec) 2. R(Retrieve):查询 查询数据库的名称:show databases; 123456789101112mysql&gt; show databases;+--------------------+| Database |+--------------------+| information_schema || gjp || mydatabase || mysql || performance_schema || test |+--------------------+6 rows in set (0.00 sec) 查询某个数据库的字符集；查询某个数据库的创建语句:show create database 数据库名称; 1234567mysql&gt; show create database mydatabase;+------------+---------------------------------------------------------------------+| Database | Create Database |+------------+---------------------------------------------------------------------+| mydatabase | CREATE DATABASE `mydatabase` /*!40100 DEFAULT CHARACTER SET utf8 */ |+------------+---------------------------------------------------------------------+ 1 row in set (0.00 sec) 3. U(Update):修改 修改数据库的字符集:alter database 数据库名称 character set 字符集名称; 123456789mysql&gt; alter database db2 character set utf8;Query OK, 1 row affected (0.00 sec)mysql&gt; show create database db2;+----------+--------------------------------------------------------------+| Database | Create Database |+----------+--------------------------------------------------------------+| db2 | CREATE DATABASE `db2` /*!40100 DEFAULT CHARACTER SET utf8 */ |+----------+--------------------------------------------------------------+1 row in set (0.00 sec) 4. D(Delete):删除 删除数据库:drop database 数据库名称;(非常危险的操作) 123456789101112131415mysql&gt; drop database db2;Query OK, 0 rows affected (0.01 sec)mysql&gt; show databases;+--------------------+| Database |+--------------------+| information_schema || db1 || gjp || mydatabase || mysql || performance_schema || test |+--------------------+7 rows in set (0.00 sec) 判断数据库存在，存在再删除:drop database if exists 数据库名称。 12mysql&gt; drop database if exists db2;Query OK, 0 rows affected, 1 warning (0.00 sec) 5. 使用数据库 查询当前正在使用的数据库:select database(); 1234567mysql&gt; select database();+------------+| database() |+------------+| NULL |+------------+1 row in set (0.00 sec) 说明当前并没用使用数据库 使用数据库:use 数据库名称; 123456789mysql&gt; use db1;Database changedmysql&gt; select database();+------------+| database() |+------------+| db1 |+------------+1 row in set (0.00 sec) 操作表：CRUD1. C(create):创建 语法: 12345create table 表名( 列名1 数据类型1, 列名2 数据类型2, 列名3 数据类型3); 数据类型(常用): int : 整数类型age int, double : 小数类型score double(5,2), date : 日期类型，只包含年月日，yyyy-MM-dd datetime : 日期，包含年月日时分秒 yyyy-MM-dd HH:mm:ss timestamp : 时间戳类型，包含年月日时分秒 yyyy-MM-dd HH:mm:ss，如果不给这个字段赋值，或赋值为null，则默认使用当前的系统时间来自动赋值 varchar : 字符串name varchar(20):姓名最大20个字符 zhangsan 8个字符 张三 2个字符 试着创建一张表 12345678910111213141516171819202122mysql&gt; create table student( --编号 id int, --姓名 name varchar(20), --年龄 age int, --分数 score double(4,1), --出生日期 birthday date, -- 记录添加时间 insert_time timestamp);mysql&gt; show tables;+---------------+| Tables_in_gjp |+---------------+| gjp_zhangwu || student |+---------------+2 rows in set (0.00 sec) 一张表就这样被创建好了，我们可以看一下这个表的结构 123456789101112mysql&gt; desc student;+-------------+-------------+------+-----+-------------------+-----------------------------+| Field | Type | Null | Key | Default | Extra |+-------------+-------------+------+-----+-------------------+-----------------------------+| id | int(11) | YES | | NULL | || name | varchar(20) | YES | | NULL | || age | int(11) | YES | | NULL | || score | double(4,1) | YES | | NULL | || birthday | date | YES | | NULL | || insert_time | timestamp | NO | | CURRENT_TIMESTAMP | on update CURRENT_TIMESTAMP |+-------------+-------------+------+-----+-------------------+-----------------------------+6 rows in set (0.01 sec) 复制表:create table 表名 like 被复制的表名; 2. R(Retrieve):查询 查询某个数据库中所有表的名称:show tables; 1234567891011121314151617181920212223242526272829303132mysql&gt; use mysql;Database changedmysql&gt; show tables;+---------------------------+| Tables_in_mysql |+---------------------------+| columns_priv || db || event || func || general_log || help_category || help_keyword || help_relation || help_topic || host || ndb_binlog_index || plugin || proc || procs_priv || proxies_priv || servers || slow_log || tables_priv || time_zone || time_zone_leap_second || time_zone_name || time_zone_transition || time_zone_transition_type || user |+---------------------------+24 rows in set (0.00 sec) 查询表结构:desc 表名; 1234567891011121314151617181920212223242526mysql&gt; desc host;+-----------------------+---------------+------+-----+---------+-------+| Field | Type | Null | Key | Default | Extra |+-----------------------+---------------+------+-----+---------+-------+| Host | char(60) | NO | PRI | | || Db | char(64) | NO | PRI | | || Select_priv | enum('N','Y') | NO | | N | || Insert_priv | enum('N','Y') | NO | | N | || Update_priv | enum('N','Y') | NO | | N | || Delete_priv | enum('N','Y') | NO | | N | || Create_priv | enum('N','Y') | NO | | N | || Drop_priv | enum('N','Y') | NO | | N | || Grant_priv | enum('N','Y') | NO | | N | || References_priv | enum('N','Y') | NO | | N | || Index_priv | enum('N','Y') | NO | | N | || Alter_priv | enum('N','Y') | NO | | N | || Create_tmp_table_priv | enum('N','Y') | NO | | N | || Lock_tables_priv | enum('N','Y') | NO | | N | || Create_view_priv | enum('N','Y') | NO | | N | || Show_view_priv | enum('N','Y') | NO | | N | || Create_routine_priv | enum('N','Y') | NO | | N | || Alter_routine_priv | enum('N','Y') | NO | | N | || Execute_priv | enum('N','Y') | NO | | N | || Trigger_priv | enum('N','Y') | NO | | N | |+-----------------------+---------------+------+-----+---------+-------+20 rows in set (0.01 sec) 3. U(Update):修改 修改表名:alter table 表名 rename to 新的表名; 1234567891011121314151617181920mysql&gt; show tables;+---------------+| Tables_in_gjp |+---------------+| gjp_zhangwu || student |+---------------+2 rows in set (0.00 sec)mysql&gt; alter table student rename to stu;Query OK, 0 rows affected (0.00 sec)mysql&gt; show tables;+---------------+| Tables_in_gjp |+---------------+| gjp_zhangwu || stu |+---------------+2 rows in set (0.00 sec) 修改表的字符集:alter table 表名 character set 字符集名称; 123456789101112131415161718192021222324252627282930313233mysql&gt; show create table stu;+-------+----------------------------------------------------------------------------------------+| Table | Create Table |+-----+------------------------------------------------------------------------------------------+| stu | CREATE TABLE `stu` ( `id` int(11) DEFAULT NULL, `name` varchar(20) DEFAULT NULL, `age` int(11) DEFAULT NULL, `score` double(4,1) DEFAULT NULL, `birthday` date DEFAULT NULL, `insert_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP) ENGINE=InnoDB DEFAULT CHARSET=utf8 |+-------+----------------------------------------------------------------------------------------+1 row in set (0.00 sec)mysql&gt; alter table stu character set gbk;Query OK, 0 rows affected (0.01 sec)Records: 0 Duplicates: 0 Warnings: 0mysql&gt; show create table stu;+-------+----------------------------------------------------------------------------------------+| Table | Create Table |+-------+----------------------------------------------------------------------------------------+| stu | CREATE TABLE `stu` ( `id` int(11) DEFAULT NULL, `name` varchar(20) CHARACTER SET utf8 DEFAULT NULL, `age` int(11) DEFAULT NULL, `score` double(4,1) DEFAULT NULL, `birthday` date DEFAULT NULL, `insert_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP) ENGINE=InnoDB DEFAULT CHARSET=gbk |+-------+----------------------------------------------------------------------------------------+1 row in set (0.00 sec) 添加一列:alter table 表名 add 列名 数据类型; 1234567891011121314151617mysql&gt; alter table stu add gender varchar(10);Query OK, 0 rows affected (0.01 sec)Records: 0 Duplicates: 0 Warnings: 0mysql&gt; desc stu;+-------------+-------------+------+-----+-------------------+-----------------------------+| Field | Type | Null | Key | Default | Extra |+-------------+-------------+------+-----+-------------------+-----------------------------+| id | int(11) | YES | | NULL | || name | varchar(20) | YES | | NULL | || age | int(11) | YES | | NULL | || score | double(4,1) | YES | | NULL | || birthday | date | YES | | NULL | || insert_time | timestamp | NO | | CURRENT_TIMESTAMP | on update CURRENT_TIMESTAMP || gender | varchar(10) | YES | | NULL | |+-------------+-------------+------+-----+-------------------+-----------------------------+7 rows in set (0.01 sec) 修改列名称:alter table 表名 change 原列名 改动之后的列名 数据类型; 1234567891011121314151617mysql&gt; alter table stu change gender sex varchar(20);Query OK, 0 rows affected (0.01 sec)Records: 0 Duplicates: 0 Warnings: 0mysql&gt; desc stu;+-------------+-------------+------+-----+-------------------+-----------------------------+| Field | Type | Null | Key | Default | Extra |+-------------+-------------+------+-----+-------------------+-----------------------------+| id | int(11) | YES | | NULL | || name | varchar(20) | YES | | NULL | || age | int(11) | YES | | NULL | || score | double(4,1) | YES | | NULL | || birthday | date | YES | | NULL | || insert_time | timestamp | NO | | CURRENT_TIMESTAMP | on update CURRENT_TIMESTAMP || sex | varchar(20) | YES | | NULL | |+-------------+-------------+------+-----+-------------------+-----------------------------+7 rows in set (0.01 sec) 修改列的数据类型:alter table 表名 modify 列名 新数据类型 1234567891011121314151617mysql&gt; alter table stu modify sex varchar(10);Query OK, 0 rows affected (0.01 sec)Records: 0 Duplicates: 0 Warnings: 0mysql&gt; desc stu;+-------------+-------------+------+-----+-------------------+-----------------------------+| Field | Type | Null | Key | Default | Extra |+-------------+-------------+------+-----+-------------------+-----------------------------+| id | int(11) | YES | | NULL | || name | varchar(20) | YES | | NULL | || age | int(11) | YES | | NULL | || score | double(4,1) | YES | | NULL | || birthday | date | YES | | NULL | || insert_time | timestamp | NO | | CURRENT_TIMESTAMP | on update CURRENT_TIMESTAMP || sex | varchar(10) | YES | | NULL | |+-------------+-------------+------+-----+-------------------+-----------------------------+7 rows in set (0.01 sec) 删除列:alter table 表名 drop 列名; 12345678910111213141516mysql&gt; alter table stu drop sex;Query OK, 0 rows affected (0.01 sec)Records: 0 Duplicates: 0 Warnings: 0mysql&gt; desc stu;+-------------+-------------+------+-----+-------------------+-----------------------------+| Field | Type | Null | Key | Default | Extra |+-------------+-------------+------+-----+-------------------+-----------------------------+| id | int(11) | YES | | NULL | || name | varchar(20) | YES | | NULL | || age | int(11) | YES | | NULL | || score | double(4,1) | YES | | NULL | || birthday | date | YES | | NULL | || insert_time | timestamp | NO | | CURRENT_TIMESTAMP | on update CURRENT_TIMESTAMP |+-------------+-------------+------+-----+-------------------+-----------------------------+6 rows in set (0.01 sec) 4. D(Delete):删除 不判断表是否存在:drop table 表名我们可以使用:create table stu like student;来复制一个和student一模一样的表 123456789101112131415161718192021222324mysql&gt; create table stu like student;Query OK, 0 rows affected (0.01 sec)mysql&gt; show tables;+---------------+| Tables_in_gjp |+---------------+| gjp_zhangwu || stu || student |+---------------+3 rows in set (0.00 sec)mysql&gt; drop table stu;Query OK, 0 rows affected (0.00 sec)mysql&gt; show tables;+---------------+| Tables_in_gjp |+---------------+| gjp_zhangwu || student |+---------------+2 rows in set (0.00 sec) 判断表是否存在:drop table if exists 表名 123456789101112131415161718192021mysql&gt; show tables;+---------------+| Tables_in_gjp |+---------------+| gjp_zhangwu || stu || student |+---------------+3 rows in set (0.00 sec)mysql&gt; drop table if exists stu;Query OK, 0 rows affected (0.01 sec)mysql&gt; show tables;+---------------+| Tables_in_gjp |+---------------+| gjp_zhangwu || student |+---------------+2 rows in set (0.00 sec) 数据库和表的一些基本操作已经学习完了，下节学习一个图形化的MySQL工具SQLYog以及更多的SQL语句。]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git]]></title>
    <url>%2Fgit.html</url>
    <content type="text"><![CDATA[git的安装，一些命令与github Git1.什么是GitGit是一个分布式的管理系统，我们可以使用Git和Github来管理和保存我们的代码以及文件。 2.Git的安装直接百度搜索Git下载安装包，即可傻瓜式的安装，安装完成后鼠标右键单击桌面可以看到Git Base Here和Git Gui Here。 Git Bash是Git的命令行，Git Gui是Git的图形化工具，我们选择使用Git Bash 3.创建版本库 桌面新建一个文件夹git，打开文件夹，鼠标右键，点击Git Base Here调出Git命令行。 第一次打开需要输入个人信息 在命令行中输入 12$ git config --global user.name &quot;Your Name&quot;$ git config --global user.email &quot;email@example.com&quot; 然后输入git init 初始化版本库 1$ git init 初始化好的版本库有(master)标识 1James@LAPTOP-4UFJ74L2 MINGW64 ~/Desktop/git (master) 新建一个a.txt的文件，内容为hello world，通过 git add a.txt 命令先将文件推送到暂存区 1234James@LAPTOP-4UFJ74L2 MINGW64 ~/Desktop/git (master) $ git add a.txtwarning: LF will be replaced by CRLF in a.txt. The file will have its original line endings in your working directory. 然后使用git commit -m &#39;推送描述&#39; 将文件推送到版本库 ‘推送描述可以随便写’，但必须要写 12345James@LAPTOP-4UFJ74L2 MINGW64 ~/Desktop/git (master)$ git commit -m &apos;add a.txt&apos;[master (root-commit) 0e0677a] add a.txt 1 file changed, 1 insertion(+) create mode 100644 a.txt 这样一个文件就推送到了版本库中]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[markdown语法]]></title>
    <url>%2Fmarkdown%E8%AF%AD%E6%B3%95.html</url>
    <content type="text"><![CDATA[markdown语法 什么是markdown Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。通过简单的代码就能做出好看的排版，写博客首选(这篇文章就是markdown语法写成)。下面具体看一下markdown的语法 markdown具体语法 注：每个语法字母后面带空格 1.标题 一级标题： # 一级标题 二级标题： ## 二级标题 三级标题： ### 三级标题 效果如下，后面的标题依次类推 一级标题二级标题三级标题 2. 分割线 --- 3. 注释&gt;&gt;这是注释 这是注释 4. 无序列表*或-* 一* 二- 三- 四 效果如下 一 二 三 四 5. 有序列表直接写数字 6. 引入图片 ![名字](地址 )![jk](https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=3446748556,3128572954&amp;fm=27&amp;gp=0.jpg ) 效果如下 7. 输入代码块 效果如下 123public static void main(String[] args)&#123; System.out.println("Hello world");&#125; 1print("Hello world") 8. 表格 | 姓名 | 年龄 | 性别 ||----|----|----||td |td|td||td|td|td||td|td|td| >效果如下 没有样式 姓名 年龄 性别 td td td td td td td td td | 姓名 | 年龄 | 性别 ||:----:|:----:|:----:||td |td|td||td|td|td||td|td|td| >效果如下 自动居中 姓名 年龄 性别 td td td td td td td td td 9. 超链接 [名称](超链接 )[tdruid](http://www.tdruid.xyz ) 效果如下 tdruid 支持markdown语法的编辑器有很多，比如 Typora,这是一款功能比较强大的markdown编辑器，推荐大家使用今天的博客就到这里。希望大家好好学习，天天向上]]></content>
      <categories>
        <category>markdown</category>
      </categories>
  </entry>
</search>
