<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Linux的学习(1)]]></title>
    <url>%2Flinux(1).html</url>
    <content type="text"><![CDATA[今天开始学习Linux，废话不多说，直接上内容 1.目录结构 /：表示的是根的意思 /bin: (binary)存放的是一些二进制文件，在Linux中二进制文件是可以被执行的。这个目录中的命令是给普通用户使用(非超级管理员用户) /etc: Linux下所有的配置文件都会存放在etc目录 /home: 是所有非root用户家目录的一个集合 /root: root用户的家目录 /sbin: sbin表示shell bin ，里面同样也类似与bin目录，也存放了一些二进制文件，只不过这些命令只能是让超级管理员去运行 /usr: 存放着一些用户自己安装的软件，类似于windows下的Program Files目录 /var: variable(变量)，存放着会变的文件，例如Linux下的日志文件。 这些都是比较重要的目录。 2.命令行(shell) 3.基本指令通用语法格式 : 指令名称 [选项][操作的目标] 简单指令ls指令 ls [路径]: 表示列出指定路径下的文件夹和文件的名字，如果路径没有指定则列出当前路径下的。 12james@LAPTOP-4UFJ74L2:~$ lsDesktop Documents Downloads Music Pictures Public Templates Videos ls -l[路径]:表示以列表的形式列出指定路径下的文件夹和文件的名字 12345678910james@LAPTOP-4UFJ74L2:~$ ls -ltotal 0drwxr-xr-x 1 james james 4096 Jul 28 13:39 Desktopdrwxr-xr-x 1 james james 4096 Jul 28 13:39 Documentsdrwxr-xr-x 1 james james 4096 Jul 28 13:39 Downloadsdrwxr-xr-x 1 james james 4096 Jul 28 13:39 Musicdrwxr-xr-x 1 james james 4096 Jul 28 13:39 Picturesdrwxr-xr-x 1 james james 4096 Jul 28 13:39 Publicdrwxr-xr-x 1 james james 4096 Jul 28 13:39 Templatesdrwxr-xr-x 1 james james 4096 Jul 28 13:39 Videos ls -la[路径]: 表示以列表的形式列出指定路径下的文件夹和文件名(包含隐藏文件，all),以.开头的为隐藏文件 123456789101112131415161718192021222324252627282930james@LAPTOP-4UFJ74L2:~$ ls -latotal 164drwxr-xr-x 1 james james 4096 Aug 1 17:59 .drwxr-xr-x 1 root root 4096 May 20 14:14 ..-rw------- 1 james james 1754 Aug 1 17:59 .ICEauthority-rw------- 1 james james 545 Aug 1 17:59 .Xauthority-rw------- 1 james james 943 Aug 1 15:15 .bash_history-rw-r--r-- 1 james james 220 May 20 14:14 .bash_logout-rw-r--r-- 1 james james 3771 May 20 14:14 .bashrcdrwxrwxrwx 1 james james 4096 Jul 28 13:54 .cachedrwxrwxrwx 1 james james 4096 Jul 28 13:57 .configdrwx------ 1 james james 4096 Jul 28 13:39 .dbusdrwx------ 1 james james 4096 Aug 1 17:59 .gnupgdrwx------ 1 james james 4096 Jul 28 13:39 .gvfsdrwxrwxrwx 1 james james 4096 Jul 28 13:39 .local-rw-r--r-- 1 james james 807 May 20 14:14 .profile-rw------- 1 james james 7 Jul 28 14:17 .python_history-rw-r--r-- 1 james james 0 May 20 14:17 .sudo_as_admin_successful-rw------- 1 james james 10589 Aug 1 15:15 .viminfodrwx------ 1 james james 4096 Aug 1 17:59 .vnc-rw------- 1 james james 81127 Aug 1 18:00 .xsession-errors-rw-rw-rw- 1 james james 42275 May 20 14:26 .zcompdumpdrwxr-xr-x 1 james james 4096 Jul 28 13:39 Desktopdrwxr-xr-x 1 james james 4096 Jul 28 13:39 Documentsdrwxr-xr-x 1 james james 4096 Jul 28 13:39 Downloadsdrwxr-xr-x 1 james james 4096 Jul 28 13:39 Musicdrwxr-xr-x 1 james james 4096 Jul 28 13:39 Picturesdrwxr-xr-x 1 james james 4096 Jul 28 13:39 Publicdrwxr-xr-x 1 james james 4096 Jul 28 13:39 Templatesdrwxr-xr-x 1 james james 4096 Jul 28 13:39 Videos clear指令 表示的含义: 清空当前屏幕中全部的命令(其实实质是没有清空，只不过是顶到上面去了) su指令 作用: 切换用户 语法: su 需要切换到的用户名(用户名可以不写，则表示切换到root用户) 当切换到的用户权限如果比当前用户的权限低，可以直接切换，不需要密码，可直接切换；反之，如果从低到高切换则要求输入被切换到的账号对应的密码 cd指令 作用: 切换目录(change directory) 语法: cd 需要切换到的路径(路径可以是相对路径，也可以是绝对路径) 路径可以写可以不写，不写则表示切换到当前用户的家目录 在切换路径或者后期打开一个文件的时候可以多使用tab键(自动补全命令) 低级用户没有权限访问高级用户相关的资源 pwd指令 作用: 打印当前的工作路径 12james@LAPTOP-4UFJ74L2:~$ pwd/home/james 文档的操作指令创建文件 命令:touch 语法: touch 路径 例如: 在当前路径下创建一个文件名字叫a.txt1touch a.txt 创建文件夹 命令: mkdir 语法: mkdir 文件夹路径 文件夹与文件不能同名 复制 命令: cp 语法: cp [-r]需要复制的文档 需要保存的位置 例如: cp /a.txt /home/james 选项说明: -r: 表示递归，如果复制的是文件夹，-r必须加 移动/重命名 命令: mv 语法: mv 需要操作的文档 新的文档的位置 例如: 移动 1234567891011james@LAPTOP-4UFJ74L2:~$ ls12 Desktop Documents Downloads Music Pictures Public Templates Videosjames@LAPTOP-4UFJ74L2:~$ touch a.txtjames@LAPTOP-4UFJ74L2:~$ ls12 Desktop Documents Downloads Music Pictures Public Templates Videos a.txtjames@LAPTOP-4UFJ74L2:~$ mv /home/james/a.txt /home/james/12james@LAPTOP-4UFJ74L2:~$ ls12 Desktop Documents Downloads Music Pictures Public Templates Videosjames@LAPTOP-4UFJ74L2:~$ cd 12james@LAPTOP-4UFJ74L2:~/12$ lsa.txt 重命名 12345james@LAPTOP-4UFJ74L2:~$ ls12 Desktop Documents Downloads Music Pictures Public Templates Videosjames@LAPTOP-4UFJ74L2:~$ mv 12 123james@LAPTOP-4UFJ74L2:~$ ls123 Desktop Documents Downloads Music Pictures Public Templates Videos 删除 命令: rm 语法: rm [-rf] 需要删除的文档 选项说明: -r: 表示递归(删除文件夹) -f: 表示强制, 没有删除确认提示 rm -rf /: 删除系统全部文件 文档的查看指令tail指令 作用: 查看一个文件的末n行 语法: tail-n 文件的路径 说明: -n可以不写，不写，默认表示10行 head指令 作用: 查看一个文件的头n行 语法: head-n 文件的路径 说明: -n可以不写，不写，默认表示10行 cat指令 作用: 查看某个文件的全部内容 语法: cat 文件的路径1 文件路径2 文件路径3... tac指令 作用: 倒序查看某个文件的全部内容 语法: tac 文件的路径1 文件路径2 文件路径3... vim指令 作用: 打开文件，显示内容 语法: vim 文件的路径 关机重启指令reboot指令 作用: 重启计算机 语法: reboot 部分情况下(除非自开机以来，只有当前一个普通用户登陆过)，普通用户无法执行reboot命令 shutdown指令 作用: 关机 语法: shutdown -h 时间 时间常见的值: now: 表示立即关机 +m : m表示数字，例如+5，则表示五分钟之后关机 halt指令 作用: 关机(关闭内存) 语法: halt]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux的学习(2)]]></title>
    <url>%2Flinux(2).html</url>
    <content type="text"><![CDATA[今天继续学习linux进阶命令]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL的学习(3)]]></title>
    <url>%2FMySQL(3).html</url>
    <content type="text"></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL的学习(1)]]></title>
    <url>%2FMySQL(1).html</url>
    <content type="text"><![CDATA[MySQl是使用量第二的数据库，他开源，免费，深受中小型企业的喜欢，今天学习MySQL的安装与基本配置 MySQL数据库安装网下下载安装包安装即可，勾选我同意后next,选择custom(用户自定义)。然后选择安装目录(尽量不要选择C盘，目录路径不要出现中文字符)，直接点击下一步，最后点击Finish后会进入配置界面，依次选择Detailed Configuration–&gt;Developer Machine–&gt;Multifunctional Database–&gt;然后可以点击下一步(默认端口3306不要改动)–&gt;Manual Selected Defult Character Set(选择字符集：utf8)–&gt;将Include Bin Directory in windows PATH打对号–&gt;设置密码，用户名都是root，不需要设置–&gt;点击完成 命令行输入 mysql -uroot -p 出现 welcome to the mysql monitor 即安装完成 ，如果没有出现，安装失败，需要将mysql重新卸载安装 卸载 找到MySQl的安装目录，找到my.ini文件,复制 #Path to the database rootdatadir=”C:/ProgramData/MySQL/MySQL Server 5.5/Data/“ 卸载MySQL，控制面板卸载即可，此时没有卸载干净，打开刚才复制的文件夹，删除C:/ProgramData 目录下的MySQl文件夹，这是才算卸载，就可以进行MySQL的重新安装了 配置 启动MySQL服务以管理员身份打开命令行，输入 net start mysql:启动mysql服务 net stop mysql: 关闭mysql服务 mysql登陆mysql -uroot -p mysql登出exit MySQL存储数据的结构mysql的数据目录在 C://ProgramData//MySQL//MySQL Server//Data MySQL的安装配置就到这里，下节学习SQL语句]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL的学习(2)]]></title>
    <url>%2FMySQL(2).html</url>
    <content type="text"><![CDATA[今天来学习一下SQL语句以及数据库，表的CRUD操作 什么是SQL语句Structured Query Language : 结构化查询语言，定义了操作所有关系型数据库的规则。 SQL通用写法 SQL语句可以单行或多行书写，以分号结尾。 可使用空格和缩进来增强语句的可读性。 SQL语句不区分大小写。但推荐使用大写 3种注释 单行注释： --注释内容 # 注释内容 多行注释： /* 注释 */ SQL的分类 DDL: 用来定义数据库对象：数据库，表，列等。关键字：create,drop,alter等。 DML: 用来对数据库中的数据进行增删改。关键字：insert,delete,update等。 DQL: 用来查询数据库中表的记录。关键字：select,where等。 DCL: 数据控制语言(了解)，用来定义数据库的访问权限和安全级别，及创建用户。关键字：GRANT，REMOKE 等。 1.DDL：操作数据库，表操作数据库：CRUD1. C(create):创建 创建数据库:create database 数据库名称; 12mysql&gt; create database db1;Query OK, 1 row affected (0.00 sec) 如果db1数据库之前就存在，那么这条语句就会执行失败。我们可以再次执行一下上个命令。 12mysql&gt; create database db1;ERROR 1007 (HY000): Can't create database 'db1'; database exists 报错了，我们可以在创数据库的时候加一条判断语句:create database if not exists db1; 12mysql&gt; create database if not exists db1;Query OK, 1 row affected, 1 warning (0.00 sec) 并没有报错 我们也可以在创建数据库的时候指定数据库的字符集，默认是utf8,我们想要创建字符集为gbk的数据库。 12mysql&gt; create database db2 character set gbk;Query OK, 1 row affected (0.00 sec) 我们可以查看一下db2的创建信息:show create database db2; 1234567mysql&gt; show create database db2;+----------+-------------------------------------------------------------+| Database | Create Database |+----------+-------------------------------------------------------------+| db2 | CREATE DATABASE `db2` /*!40100 DEFAULT CHARACTER SET gbk */ |+----------+-------------------------------------------------------------+1 row in set (0.00 sec) 2. R(Retrieve):查询 查询数据库的名称:show databases; 123456789101112mysql&gt; show databases;+--------------------+| Database |+--------------------+| information_schema || gjp || mydatabase || mysql || performance_schema || test |+--------------------+6 rows in set (0.00 sec) 查询某个数据库的字符集；查询某个数据库的创建语句:show create database 数据库名称; 1234567mysql&gt; show create database mydatabase;+------------+---------------------------------------------------------------------+| Database | Create Database |+------------+---------------------------------------------------------------------+| mydatabase | CREATE DATABASE `mydatabase` /*!40100 DEFAULT CHARACTER SET utf8 */ |+------------+---------------------------------------------------------------------+ 1 row in set (0.00 sec) 3. U(Update):修改 修改数据库的字符集:alter database 数据库名称 character set 字符集名称; 123456789mysql&gt; alter database db2 character set utf8;Query OK, 1 row affected (0.00 sec)mysql&gt; show create database db2;+----------+--------------------------------------------------------------+| Database | Create Database |+----------+--------------------------------------------------------------+| db2 | CREATE DATABASE `db2` /*!40100 DEFAULT CHARACTER SET utf8 */ |+----------+--------------------------------------------------------------+1 row in set (0.00 sec) 4. D(Delete):删除 删除数据库:drop database 数据库名称;(非常危险的操作) 123456789101112131415mysql&gt; drop database db2;Query OK, 0 rows affected (0.01 sec)mysql&gt; show databases;+--------------------+| Database |+--------------------+| information_schema || db1 || gjp || mydatabase || mysql || performance_schema || test |+--------------------+7 rows in set (0.00 sec) 判断数据库存在，存在再删除:drop database if exists 数据库名称。 12mysql&gt; drop database if exists db2;Query OK, 0 rows affected, 1 warning (0.00 sec) 5. 使用数据库 查询当前正在使用的数据库:select database(); 1234567mysql&gt; select database();+------------+| database() |+------------+| NULL |+------------+1 row in set (0.00 sec) 说明当前并没用使用数据库 使用数据库:use 数据库名称; 123456789mysql&gt; use db1;Database changedmysql&gt; select database();+------------+| database() |+------------+| db1 |+------------+1 row in set (0.00 sec) 操作表：CRUD1. C(create):创建 语法: 12345create table 表名( 列名1 数据类型1, 列名2 数据类型2, 列名3 数据类型3); 数据类型(常用): int : 整数类型age int, double : 小数类型score double(5,2), date : 日期类型，只包含年月日，yyyy-MM-dd datetime : 日期，包含年月日时分秒 yyyy-MM-dd HH:mm:ss timestamp : 时间戳类型，包含年月日时分秒 yyyy-MM-dd HH:mm:ss，如果不给这个字段赋值，或赋值为null，则默认使用当前的系统时间来自动赋值 varchar : 字符串name varchar(20):姓名最大20个字符 zhangsan 8个字符 张三 2个字符 试着创建一张表 12345678910111213141516171819202122mysql&gt; create table student( --编号 id int, --姓名 name varchar(20), --年龄 age int, --分数 score double(4,1), --出生日期 birthday date, -- 记录添加时间 insert_time timestamp);mysql&gt; show tables;+---------------+| Tables_in_gjp |+---------------+| gjp_zhangwu || student |+---------------+2 rows in set (0.00 sec) 一张表就这样被创建好了，我们可以看一下这个表的结构 123456789101112mysql&gt; desc student;+-------------+-------------+------+-----+-------------------+-----------------------------+| Field | Type | Null | Key | Default | Extra |+-------------+-------------+------+-----+-------------------+-----------------------------+| id | int(11) | YES | | NULL | || name | varchar(20) | YES | | NULL | || age | int(11) | YES | | NULL | || score | double(4,1) | YES | | NULL | || birthday | date | YES | | NULL | || insert_time | timestamp | NO | | CURRENT_TIMESTAMP | on update CURRENT_TIMESTAMP |+-------------+-------------+------+-----+-------------------+-----------------------------+6 rows in set (0.01 sec) 复制表:create table 表名 like 被复制的表名; 2. R(Retrieve):查询 查询某个数据库中所有表的名称:show tables; 1234567891011121314151617181920212223242526272829303132mysql&gt; use mysql;Database changedmysql&gt; show tables;+---------------------------+| Tables_in_mysql |+---------------------------+| columns_priv || db || event || func || general_log || help_category || help_keyword || help_relation || help_topic || host || ndb_binlog_index || plugin || proc || procs_priv || proxies_priv || servers || slow_log || tables_priv || time_zone || time_zone_leap_second || time_zone_name || time_zone_transition || time_zone_transition_type || user |+---------------------------+24 rows in set (0.00 sec) 查询表结构:desc 表名; 1234567891011121314151617181920212223242526mysql&gt; desc host;+-----------------------+---------------+------+-----+---------+-------+| Field | Type | Null | Key | Default | Extra |+-----------------------+---------------+------+-----+---------+-------+| Host | char(60) | NO | PRI | | || Db | char(64) | NO | PRI | | || Select_priv | enum('N','Y') | NO | | N | || Insert_priv | enum('N','Y') | NO | | N | || Update_priv | enum('N','Y') | NO | | N | || Delete_priv | enum('N','Y') | NO | | N | || Create_priv | enum('N','Y') | NO | | N | || Drop_priv | enum('N','Y') | NO | | N | || Grant_priv | enum('N','Y') | NO | | N | || References_priv | enum('N','Y') | NO | | N | || Index_priv | enum('N','Y') | NO | | N | || Alter_priv | enum('N','Y') | NO | | N | || Create_tmp_table_priv | enum('N','Y') | NO | | N | || Lock_tables_priv | enum('N','Y') | NO | | N | || Create_view_priv | enum('N','Y') | NO | | N | || Show_view_priv | enum('N','Y') | NO | | N | || Create_routine_priv | enum('N','Y') | NO | | N | || Alter_routine_priv | enum('N','Y') | NO | | N | || Execute_priv | enum('N','Y') | NO | | N | || Trigger_priv | enum('N','Y') | NO | | N | |+-----------------------+---------------+------+-----+---------+-------+20 rows in set (0.01 sec) 3. U(Update):修改 修改表名:alter table 表名 rename to 新的表名; 1234567891011121314151617181920mysql&gt; show tables;+---------------+| Tables_in_gjp |+---------------+| gjp_zhangwu || student |+---------------+2 rows in set (0.00 sec)mysql&gt; alter table student rename to stu;Query OK, 0 rows affected (0.00 sec)mysql&gt; show tables;+---------------+| Tables_in_gjp |+---------------+| gjp_zhangwu || stu |+---------------+2 rows in set (0.00 sec) 修改表的字符集:alter table 表名 character set 字符集名称; 123456789101112131415161718192021222324252627282930313233mysql&gt; show create table stu;+-------+----------------------------------------------------------------------------------------+| Table | Create Table |+-----+------------------------------------------------------------------------------------------+| stu | CREATE TABLE `stu` ( `id` int(11) DEFAULT NULL, `name` varchar(20) DEFAULT NULL, `age` int(11) DEFAULT NULL, `score` double(4,1) DEFAULT NULL, `birthday` date DEFAULT NULL, `insert_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP) ENGINE=InnoDB DEFAULT CHARSET=utf8 |+-------+----------------------------------------------------------------------------------------+1 row in set (0.00 sec)mysql&gt; alter table stu character set gbk;Query OK, 0 rows affected (0.01 sec)Records: 0 Duplicates: 0 Warnings: 0mysql&gt; show create table stu;+-------+----------------------------------------------------------------------------------------+| Table | Create Table |+-------+----------------------------------------------------------------------------------------+| stu | CREATE TABLE `stu` ( `id` int(11) DEFAULT NULL, `name` varchar(20) CHARACTER SET utf8 DEFAULT NULL, `age` int(11) DEFAULT NULL, `score` double(4,1) DEFAULT NULL, `birthday` date DEFAULT NULL, `insert_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP) ENGINE=InnoDB DEFAULT CHARSET=gbk |+-------+----------------------------------------------------------------------------------------+1 row in set (0.00 sec) 添加一列:alter table 表名 add 列名 数据类型; 1234567891011121314151617mysql&gt; alter table stu add gender varchar(10);Query OK, 0 rows affected (0.01 sec)Records: 0 Duplicates: 0 Warnings: 0mysql&gt; desc stu;+-------------+-------------+------+-----+-------------------+-----------------------------+| Field | Type | Null | Key | Default | Extra |+-------------+-------------+------+-----+-------------------+-----------------------------+| id | int(11) | YES | | NULL | || name | varchar(20) | YES | | NULL | || age | int(11) | YES | | NULL | || score | double(4,1) | YES | | NULL | || birthday | date | YES | | NULL | || insert_time | timestamp | NO | | CURRENT_TIMESTAMP | on update CURRENT_TIMESTAMP || gender | varchar(10) | YES | | NULL | |+-------------+-------------+------+-----+-------------------+-----------------------------+7 rows in set (0.01 sec) 修改列名称:alter table 表名 change 原列名 改动之后的列名 数据类型; 1234567891011121314151617mysql&gt; alter table stu change gender sex varchar(20);Query OK, 0 rows affected (0.01 sec)Records: 0 Duplicates: 0 Warnings: 0mysql&gt; desc stu;+-------------+-------------+------+-----+-------------------+-----------------------------+| Field | Type | Null | Key | Default | Extra |+-------------+-------------+------+-----+-------------------+-----------------------------+| id | int(11) | YES | | NULL | || name | varchar(20) | YES | | NULL | || age | int(11) | YES | | NULL | || score | double(4,1) | YES | | NULL | || birthday | date | YES | | NULL | || insert_time | timestamp | NO | | CURRENT_TIMESTAMP | on update CURRENT_TIMESTAMP || sex | varchar(20) | YES | | NULL | |+-------------+-------------+------+-----+-------------------+-----------------------------+7 rows in set (0.01 sec) 修改列的数据类型:alter table 表名 modify 列名 新数据类型 1234567891011121314151617mysql&gt; alter table stu modify sex varchar(10);Query OK, 0 rows affected (0.01 sec)Records: 0 Duplicates: 0 Warnings: 0mysql&gt; desc stu;+-------------+-------------+------+-----+-------------------+-----------------------------+| Field | Type | Null | Key | Default | Extra |+-------------+-------------+------+-----+-------------------+-----------------------------+| id | int(11) | YES | | NULL | || name | varchar(20) | YES | | NULL | || age | int(11) | YES | | NULL | || score | double(4,1) | YES | | NULL | || birthday | date | YES | | NULL | || insert_time | timestamp | NO | | CURRENT_TIMESTAMP | on update CURRENT_TIMESTAMP || sex | varchar(10) | YES | | NULL | |+-------------+-------------+------+-----+-------------------+-----------------------------+7 rows in set (0.01 sec) 删除列:alter table 表名 drop 列名; 12345678910111213141516mysql&gt; alter table stu drop sex;Query OK, 0 rows affected (0.01 sec)Records: 0 Duplicates: 0 Warnings: 0mysql&gt; desc stu;+-------------+-------------+------+-----+-------------------+-----------------------------+| Field | Type | Null | Key | Default | Extra |+-------------+-------------+------+-----+-------------------+-----------------------------+| id | int(11) | YES | | NULL | || name | varchar(20) | YES | | NULL | || age | int(11) | YES | | NULL | || score | double(4,1) | YES | | NULL | || birthday | date | YES | | NULL | || insert_time | timestamp | NO | | CURRENT_TIMESTAMP | on update CURRENT_TIMESTAMP |+-------------+-------------+------+-----+-------------------+-----------------------------+6 rows in set (0.01 sec) 4. D(Delete):删除 不判断表是否存在:drop table 表名我们可以使用:create table stu like student;来复制一个和student一模一样的表 123456789101112131415161718192021222324mysql&gt; create table stu like student;Query OK, 0 rows affected (0.01 sec)mysql&gt; show tables;+---------------+| Tables_in_gjp |+---------------+| gjp_zhangwu || stu || student |+---------------+3 rows in set (0.00 sec)mysql&gt; drop table stu;Query OK, 0 rows affected (0.00 sec)mysql&gt; show tables;+---------------+| Tables_in_gjp |+---------------+| gjp_zhangwu || student |+---------------+2 rows in set (0.00 sec) 判断表是否存在:drop table if exists 表名 123456789101112131415161718192021mysql&gt; show tables;+---------------+| Tables_in_gjp |+---------------+| gjp_zhangwu || stu || student |+---------------+3 rows in set (0.00 sec)mysql&gt; drop table if exists stu;Query OK, 0 rows affected (0.01 sec)mysql&gt; show tables;+---------------+| Tables_in_gjp |+---------------+| gjp_zhangwu || student |+---------------+2 rows in set (0.00 sec) 数据库和表的一些基本操作已经学习完了，下节学习一个图形化的MySQL工具SQLYog以及更多的SQL语句。]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git]]></title>
    <url>%2Fgit.html</url>
    <content type="text"><![CDATA[git的安装，一些命令与github Git1.什么是GitGit是一个分布式的管理系统，我们可以使用Git和Github来管理和保存我们的代码以及文件。 2.Git的安装直接百度搜索Git下载安装包，即可傻瓜式的安装，安装完成后鼠标右键单击桌面可以看到Git Base Here和Git Gui Here。 Git Bash是Git的命令行，Git Gui是Git的图形化工具，我们选择使用Git Bash 3.创建版本库 桌面新建一个文件夹git，打开文件夹，鼠标右键，点击Git Base Here调出Git命令行。 第一次打开需要输入个人信息 在命令行中输入 12$ git config --global user.name &quot;Your Name&quot;$ git config --global user.email &quot;email@example.com&quot; 然后输入git init 初始化版本库 1$ git init 初始化好的版本库有(master)标识 1James@LAPTOP-4UFJ74L2 MINGW64 ~/Desktop/git (master) 新建一个a.txt的文件，内容为hello world，通过 git add a.txt 命令先将文件推送到暂存区 1234James@LAPTOP-4UFJ74L2 MINGW64 ~/Desktop/git (master) $ git add a.txtwarning: LF will be replaced by CRLF in a.txt. The file will have its original line endings in your working directory. 然后使用git commit -m &#39;推送描述&#39; 将文件推送到版本库 ‘推送描述可以随便写’，但必须要写 12345James@LAPTOP-4UFJ74L2 MINGW64 ~/Desktop/git (master)$ git commit -m &apos;add a.txt&apos;[master (root-commit) 0e0677a] add a.txt 1 file changed, 1 insertion(+) create mode 100644 a.txt 这样一个文件就推送到了版本库中]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[markdown语法]]></title>
    <url>%2Fmarkdown%E8%AF%AD%E6%B3%95.html</url>
    <content type="text"><![CDATA[markdown语法 什么是markdown Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。通过简单的代码就能做出好看的排版，写博客首选(这篇文章就是markdown语法写成)。下面具体看一下markdown的语法 markdown具体语法 注：每个语法字母后面带空格 1.标题 一级标题： # 一级标题 二级标题： ## 二级标题 三级标题： ### 三级标题 效果如下，后面的标题依次类推 一级标题二级标题三级标题 2. 分割线 --- 3. 注释&gt;&gt;这是注释 这是注释 4. 无序列表*或-* 一* 二- 三- 四 效果如下 一 二 三 四 5. 有序列表直接写数字 6. 引入图片 ![名字](地址 )![jk](https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=3446748556,3128572954&amp;fm=27&amp;gp=0.jpg ) 效果如下 7. 输入代码块 效果如下 123public static void main(String[] args)&#123; System.out.println("Hello world");&#125; 1print("Hello world") 8. 表格 | 姓名 | 年龄 | 性别 ||----|----|----||td |td|td||td|td|td||td|td|td| >效果如下 没有样式 姓名 年龄 性别 td td td td td td td td td | 姓名 | 年龄 | 性别 ||:----:|:----:|:----:||td |td|td||td|td|td||td|td|td| >效果如下 自动居中 姓名 年龄 性别 td td td td td td td td td 9. 超链接 [名称](超链接 )[tdruid](http://www.tdruid.xyz ) 效果如下 tdruid 支持markdown语法的编辑器有很多，比如 Typora,这是一款功能比较强大的markdown编辑器，推荐大家使用今天的博客就到这里。希望大家好好学习，天天向上]]></content>
      <categories>
        <category>markdown</category>
      </categories>
  </entry>
</search>
